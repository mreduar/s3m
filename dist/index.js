function t(){return t=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)({}).hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},t.apply(null,arguments)}class e{constructor(t,i={}){this.file=t,this.options=i,this.chunkSize=i.chunk_size||e.DEFAULT_CHUNK_SIZE,this.maxConcurrentUploads=i.max_concurrent_uploads||e.DEFAULT_MAX_CONCURRENT_UPLOADS,this.fileName=t.name,this.fileSize=t.size,this.fileType=t.type,this.httpClient=i.httpClient?i.httpClient:axios,this.chunkRetries=i.chunk_retries||e.DEFAULT_MAX_CHUNK_RETRIES}async startUpload(){if(!this.fileName)throw new Error("Filename is empty");const{data:e}=await this.httpClient.post("/s3m/create-multipart-upload",t({filename:this.fileName,content_type:this.fileType},this.options.data),t({baseURL:this.options.baseURL||null,headers:this.options.headers||{}},this.options.options));return e}async upload(){try{const{key:t,uploadId:e,uuid:i}=await this.startUpload(this.file);if(!e)return void console.error("Upload ID not found");const s=this.options.progress||(()=>{}),a=await this.uploadChunks(t,e,s);if(!1===this.options.auto_complete)return s(100),{uuid:i,key:t,extension:this.fileName.split(".").pop(),name:this.fileName,upload_id:e,parts:a};const n=await this.completeUpload(t,e,a);return s(100),{uuid:i,key:t,extension:this.fileName.split(".").pop(),name:this.fileName,url:n}}catch(t){console.error(t)}}async uploadChunks(t,e,i){var s=this;const a=Math.ceil(this.fileSize/this.chunkSize),n=new Array(a).fill(0),o=[];let r=0,l=0;const h=Array.from({length:this.maxConcurrentUploads}).map(async function h(){if(l>=a)return;const p=l*s.chunkSize,u=Math.min(p+s.chunkSize,s.fileSize),c=s.file.slice(p,u);r++,l++;const d=l,m=await s.uploadChunk(t,e,d,c,a,n,i);o.push(m),r--,r<s.maxConcurrentUploads&&h()});for(await Promise.all(h);r>0;)await new Promise(t=>setTimeout(t,100));return o.sort((t,e)=>t.PartNumber-e.PartNumber)}async completeUpload(e,i,s){const{data:{url:a}}=await this.httpClient.post("/s3m/complete-multipart-upload",{parts:s,upload_id:i,key:e},t({baseURL:this.options.baseURL||null,headers:this.options.headers||{}},this.options.options));return a}async getSignUrl(e,i,s){const{data:{url:a}}=await this.httpClient.post("/s3m/create-sign-part",t({filename:this.fileName,content_type:this.fileType,part_number:s,upload_id:i,key:e},this.options.data),t({baseURL:this.options.baseURL||null,headers:this.options.headers||{}},this.options.options));return a}async uploadChunk(t,e,i,s,a,n,o){var r=this;const l=await this.getSignUrl(t,e,i);return async function t(e=0){try{return{ETag:(await r.httpClient.put(l,s,{headers:{"Content-Type":r.fileType},onUploadProgress:t=>r.handleUploadProgress(t,a,i-1,n,o)})).headers.etag,PartNumber:i}}catch(s){if(e<r.chunkRetries)return console.warn(`Retrying chunk ${i}, attempt ${e+1}`),t(e+1);throw s}}()}handleUploadProgress(t,e,i,s,a){const n=Math.round(100*t.loaded/t.total);s[i]=n,a(Math.round(s.reduce((t,e)=>t+e)/e))}}function i(t,i){return new e(t,i).upload()}e.DEFAULT_CHUNK_SIZE=10485760,e.DEFAULT_MAX_CONCURRENT_UPLOADS=5,e.DEFAULT_MAX_CHUNK_RETRIES=3;export{i as s3m};
